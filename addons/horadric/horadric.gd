@tool

## Corresponds to an exported variable in a script
class HoradricMember:
	var name: String
	var type: String
	var default_value: String
	
	func render() -> String:
		var result = "@export var " + name + ": " + type + " = "
		if type == "String":
			result += "\"" + default_value + "\""
		else:
			result += default_value
			
		return result

## Corresponds to a .gd script that overrides a resource.
## Also creates a folder of the same name to store instances in
class HoradricTemplate:
	# class name is PascalCase, file name is snake_case, but it's the same shit afterall
	var name: String
	var members: Array[HoradricMember] = []
	var instances: Array[String] = []

## Represents the managed directory. Pretty boring.
class HoradricDirectory:
	var templates: Array[HoradricTemplate] = []

static var managed_dir: DirAccess
static var managed_dir_path: String = "res://horadric"

static var structure: HoradricDirectory = HoradricDirectory.new()

func _init() -> void:
	print("Horadric: init")
	_reload_managed_dir()
	reload_structure()

static func _reload_managed_dir() -> void:
	print("Horadric: Reloading managed directory")
	var err = DirAccess.make_dir_recursive_absolute(managed_dir_path)
	
	if err != OK and err != ERR_ALREADY_EXISTS:
		push_error("Failed to create horadric directory at ", managed_dir_path, ": ", error_string(err))
		return
	
	managed_dir = DirAccess.open(managed_dir_path)

## Parses the managed directory and constructs a HoradricStructure from the stuff it finds
static func reload_structure() -> void:
	print("Horadric: reload")
	
	structure = HoradricDirectory.new()
	
	var t1 = HoradricTemplate.new()
	t1.name = "test"
	
	var m1 = HoradricMember.new()
	m1.name = "attribute"
	m1.type = "String"
	m1.default_value = "tralala"
	t1.members.append(m1)
	
	var m2 = HoradricMember.new()
	m2.name = "count"
	m2.type = "int"
	m2.default_value = "1"
	t1.members.append(m2)
	
	structure.templates.append(t1)

## Generates the actual files from the current HoradricStructure
static func save() -> void:
	print("Horadric: save")
	
	for t in structure.templates:
		print(t.name)
		var f = FileAccess.open(managed_dir_path + "/" + t.name.to_snake_case() + ".gd", FileAccess.WRITE)
		if f == null:
			push_error(error_string(FileAccess.get_open_error()))
			continue
		
		f.store_string("class_name " + t.name.to_pascal_case() + " extends Resource\n\n## generated by Horadric\n\n")
		
		for m in t.members:
			print(" - ", m.name)
			f.store_string(m.render() + "\n")
		
		f.close()
